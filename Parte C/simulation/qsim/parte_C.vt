// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/13/2023 21:22:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sumador_completo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sumador_completo_vlg_sample_tst(
	a0,
	a1,
	a2,
	a3,
	b0,
	b1,
	b2,
	b3,
	suma_resta,
	sampler_tx
);
input  a0;
input  a1;
input  a2;
input  a3;
input  b0;
input  b1;
input  b2;
input  b3;
input  suma_resta;
output sampler_tx;

reg sample;
time current_time;
always @(a0 or a1 or a2 or a3 or b0 or b1 or b2 or b3 or suma_resta)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sumador_completo_vlg_check_tst (
	C,
	f0,
	f1,
	f2,
	f4,
	V,
	Z,
	sampler_rx
);
input  C;
input  f0;
input  f1;
input  f2;
input  f4;
input  V;
input  Z;
input sampler_rx;

reg  C_expected;
reg  f0_expected;
reg  f1_expected;
reg  f2_expected;
reg  f4_expected;
reg  V_expected;
reg  Z_expected;

reg  C_prev;
reg  f0_prev;
reg  f1_prev;
reg  f2_prev;
reg  f4_prev;
reg  V_prev;
reg  Z_prev;

reg  C_expected_prev;
reg  f0_expected_prev;
reg  f1_expected_prev;
reg  f2_expected_prev;
reg  f4_expected_prev;
reg  V_expected_prev;
reg  Z_expected_prev;

reg  last_C_exp;
reg  last_f0_exp;
reg  last_f1_exp;
reg  last_f2_exp;
reg  last_f4_exp;
reg  last_V_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_prev = C;
	f0_prev = f0;
	f1_prev = f1;
	f2_prev = f2;
	f4_prev = f4;
	V_prev = V;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	C_expected_prev = C_expected;
	f0_expected_prev = f0_expected;
	f1_expected_prev = f1_expected;
	f2_expected_prev = f2_expected;
	f4_expected_prev = f4_expected;
	V_expected_prev = V_expected;
	Z_expected_prev = Z_expected;
end



// expected C
initial
begin
	C_expected = 1'bX;
end 

// expected f0
initial
begin
	f0_expected = 1'bX;
end 

// expected f1
initial
begin
	f1_expected = 1'bX;
end 

// expected f2
initial
begin
	f2_expected = 1'bX;
end 

// expected f4
initial
begin
	f4_expected = 1'bX;
end 

// expected V
initial
begin
	V_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 
// generate trigger
always @(C_expected or C or f0_expected or f0 or f1_expected or f1 or f2_expected or f2 or f4_expected or f4 or V_expected or V or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C = %b | expected f0 = %b | expected f1 = %b | expected f2 = %b | expected f4 = %b | expected V = %b | expected Z = %b | ",C_expected_prev,f0_expected_prev,f1_expected_prev,f2_expected_prev,f4_expected_prev,V_expected_prev,Z_expected_prev);
	$display("| real C = %b | real f0 = %b | real f1 = %b | real f2 = %b | real f4 = %b | real V = %b | real Z = %b | ",C_prev,f0_prev,f1_prev,f2_prev,f4_prev,V_prev,Z_prev);
`endif
	if (
		( C_expected_prev !== 1'bx ) && ( C_prev !== C_expected_prev )
		&& ((C_expected_prev !== last_C_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp = C_expected_prev;
	end
	if (
		( f0_expected_prev !== 1'bx ) && ( f0_prev !== f0_expected_prev )
		&& ((f0_expected_prev !== last_f0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f0_expected_prev);
		$display ("     Real value = %b", f0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f0_exp = f0_expected_prev;
	end
	if (
		( f1_expected_prev !== 1'bx ) && ( f1_prev !== f1_expected_prev )
		&& ((f1_expected_prev !== last_f1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f1_expected_prev);
		$display ("     Real value = %b", f1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_f1_exp = f1_expected_prev;
	end
	if (
		( f2_expected_prev !== 1'bx ) && ( f2_prev !== f2_expected_prev )
		&& ((f2_expected_prev !== last_f2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f2_expected_prev);
		$display ("     Real value = %b", f2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_f2_exp = f2_expected_prev;
	end
	if (
		( f4_expected_prev !== 1'bx ) && ( f4_prev !== f4_expected_prev )
		&& ((f4_expected_prev !== last_f4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f4_expected_prev);
		$display ("     Real value = %b", f4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_f4_exp = f4_expected_prev;
	end
	if (
		( V_expected_prev !== 1'bx ) && ( V_prev !== V_expected_prev )
		&& ((V_expected_prev !== last_V_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_expected_prev);
		$display ("     Real value = %b", V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_V_exp = V_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sumador_completo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a0;
reg a1;
reg a2;
reg a3;
reg b0;
reg b1;
reg b2;
reg b3;
reg suma_resta;
// wires                                               
wire C;
wire f0;
wire f1;
wire f2;
wire f4;
wire V;
wire Z;

wire sampler;                             

// assign statements (if any)                          
sumador_completo i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.C(C),
	.f0(f0),
	.f1(f1),
	.f2(f2),
	.f4(f4),
	.suma_resta(suma_resta),
	.V(V),
	.Z(Z)
);

// a0
initial
begin
	a0 = 1'b1;
	a0 = #40000 1'b0;
	a0 = #40000 1'b1;
	a0 = #40000 1'b0;
	a0 = #40000 1'b1;
	a0 = #80000 1'b0;
	a0 = #160000 1'b1;
	a0 = #80000 1'b0;
	a0 = #40000 1'b1;
	a0 = #80000 1'b0;
	a0 = #80000 1'b1;
	a0 = #80000 1'b0;
	a0 = #160000 1'b1;
	a0 = #40000 1'b0;
end 

// a1
initial
begin
	a1 = 1'b0;
	a1 = #40000 1'b1;
	a1 = #40000 1'b0;
	a1 = #40000 1'b1;
	a1 = #160000 1'b0;
	a1 = #40000 1'b1;
	a1 = #40000 1'b0;
	a1 = #160000 1'b1;
	a1 = #40000 1'b0;
	a1 = #240000 1'b1;
end 

// a2
initial
begin
	a2 = 1'b1;
	a2 = #40000 1'b0;
	a2 = #120000 1'b1;
	a2 = #40000 1'b0;
	a2 = #160000 1'b1;
	a2 = #120000 1'b0;
	a2 = #280000 1'b1;
	a2 = #40000 1'b0;
	a2 = #40000 1'b1;
	a2 = #40000 1'b0;
	a2 = #40000 1'b1;
	a2 = #40000 1'b0;
end 

// a3
initial
begin
	a3 = 1'b1;
	a3 = #280000 1'b0;
	a3 = #40000 1'b1;
	a3 = #120000 1'b0;
	a3 = #80000 1'b1;
	a3 = #80000 1'b0;
	a3 = #80000 1'b1;
	a3 = #80000 1'b0;
	a3 = #40000 1'b1;
end 

// b0
initial
begin
	b0 = 1'b0;
	b0 = #80000 1'b1;
	b0 = #160000 1'b0;
	b0 = #40000 1'b1;
	b0 = #80000 1'b0;
	b0 = #120000 1'b1;
	b0 = #40000 1'b0;
	b0 = #40000 1'b1;
	b0 = #40000 1'b0;
	b0 = #80000 1'b1;
	b0 = #40000 1'b0;
	b0 = #120000 1'b1;
	b0 = #80000 1'b0;
	b0 = #40000 1'b1;
end 

// b1
initial
begin
	b1 = 1'b1;
	b1 = #80000 1'b0;
	b1 = #80000 1'b1;
	b1 = #120000 1'b0;
	b1 = #80000 1'b1;
	b1 = #40000 1'b0;
	b1 = #40000 1'b1;
	b1 = #80000 1'b0;
	b1 = #40000 1'b1;
	b1 = #80000 1'b0;
	b1 = #120000 1'b1;
	b1 = #40000 1'b0;
	b1 = #40000 1'b1;
	b1 = #120000 1'b0;
end 

// b2
initial
begin
	b2 = 1'b1;
	b2 = #120000 1'b0;
	b2 = #40000 1'b1;
	b2 = #40000 1'b0;
	b2 = #80000 1'b1;
	b2 = #120000 1'b0;
	b2 = #40000 1'b1;
	b2 = #40000 1'b0;
	b2 = #80000 1'b1;
	b2 = #40000 1'b0;
	b2 = #80000 1'b1;
	b2 = #80000 1'b0;
	b2 = #40000 1'b1;
	b2 = #80000 1'b0;
	b2 = #40000 1'b1;
end 

// b3
initial
begin
	b3 = 1'b0;
	b3 = #40000 1'b1;
	b3 = #40000 1'b0;
	b3 = #40000 1'b1;
	b3 = #40000 1'b0;
	b3 = #40000 1'b1;
	b3 = #120000 1'b0;
	b3 = #240000 1'b1;
	b3 = #80000 1'b0;
	b3 = #40000 1'b1;
	b3 = #80000 1'b0;
	b3 = #80000 1'b1;
	b3 = #40000 1'b0;
	b3 = #40000 1'b1;
end 

// suma_resta
initial
begin
	suma_resta = 1'b0;
	suma_resta = #500000 1'b1;
end 

sumador_completo_vlg_sample_tst tb_sample (
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.suma_resta(suma_resta),
	.sampler_tx(sampler)
);

sumador_completo_vlg_check_tst tb_out(
	.C(C),
	.f0(f0),
	.f1(f1),
	.f2(f2),
	.f4(f4),
	.V(V),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

